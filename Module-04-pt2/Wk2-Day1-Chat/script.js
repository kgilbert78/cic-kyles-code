let messages = [
    { text: "Happy Mother's Day!", timeStamp: new Date(), sentByUser: true, },
    { text: "Thank you!", timeStamp: new Date(), sentByUser: false, }
];
updateHTML();

function sendMessage(event) {
    event.preventDefault();
    const messageInput = document.getElementById("messageInput");
    messages.push(
        {
            text: messageInput.value,
            sentByUser: true,
            timeStamp: new Date()
        }
    );
    messageInput.value = "";
    updateHTML();

    generateIncomingMessage();
}

function generateIncomingMessage() {
    messages.push({
        text: `Javascript is pretending to type...`,
        sentByUser: false,
        timeStamp: new Date(),
    });
    updateHTML();

    setTimeout(() => {
        messages.splice(messages.length-1, 1);
        messages.push({
            text: "This response was generated by your motherboard.",
            sentByUser: false,
            timeStamp: new Date(),
        });
        updateHTML();
    }, 2000);
    
}

// function formatDate(timestamp) {
//     let hours = timestamp.getHours();
//     let minutes = timestamp.getMinutes();
//     let isAM = true;
//     if (hours === 12) {
//         isAM = false;
//     } else if (hours === 0) {
//         isAM = true;
//         hours = 12;
//     } else if (hours > 12) {
//         isAM = false;
//         hours -= 12;
//     }
//     // if (hours === 12 && messages.timeStamp.includes("GMT-0400")) {
//     //     isAM = false;
//     // }
//     if (minutes < 10) {
//         minutes = `0${minutes}`;
//     }
//     return `${hours}: ${minutes} ${isAM === true ? "am" : "pm"}`;
//     console.log(hours, minutes, isAM)
// }

function formatDate(timeStamp) {
	return new Intl.DateTimeFormat("default", 
    {
		hour: "numeric",
		minute: "numeric",
		second: "numeric",
	}
    ).format(timeStamp);
}

// ORIGINAL FUNCTION: IF YOU CANCEL THE MESSAGE SAYS NULL
// function editMessage(messagesIndex) {
//     const newMessageText = window.prompt(`Enter the new text for your message "${messages[messagesIndex].text}":`);
//     messages[messagesIndex].text = newMessageText;
//     updateHTML();
// }

// MAX'S CORRECTIONS:
function editMessage(messagesIndex) {
    const newMessageText = window.prompt(`Enter the new text for your message "${messages[messagesIndex].text}":`);
    if (newMessageText){
      messages[messagesIndex].text = newMessageText;
      updateHTML();
    }
}

// FIRST ATTEMPT TO CORRECT THIS - message comes out blank because newMessageText is disconnected from the window.prompt
// function editMessage(messagesIndex) {
//     const newMessageText = "";
//     if (window.prompt(`Enter the new text for your message "${messages[messagesIndex].text}":`)) {
//         messages[messagesIndex].text = newMessageText;
//         updateHTML();
//     }
// }

// SECOND ATTEMPT TO CORRECT THIS - new message now goes in but else still comes out null. I don't think newMessageText is available in that part of the loop? It doesn't show up in the terminal.
// function editMessage(messagesIndex) {
//     const originalMessageText = messages[messagesIndex].text;
//     console.log("first", originalMessageText);
//     const newMessageText = window.prompt(`Enter the new text for your message "${messages[messagesIndex].text}":`);
//         if (newMessageText !== messages[messagesIndex].text) {
//             console.log("second", originalMessageText);
//             messages[messagesIndex].text = newMessageText;
//             console.log("third", originalMessageText);
//         } else {
//             console.log("fourth", originalMessageText);;
//             newMessageText = originalMessageText;
//             //messages[messagesIndex].text = originalMessageText;
//             console.log("fifth", originalMessageText);;
//         }
//         updateHTML(); 
// }

function deleteMessage(messagesIndex) {
    if (window.confirm(`Are you sure you want to delete your message "${messages[messagesIndex].text}"?`) === true) {
        messages.splice(messagesIndex, 1);
        updateHTML();
    }
}

function updateHTML(messagesIndex) {
    const messagesDiv = document.getElementById("messages");
    let htmlToUpdate = "";
    for (const [messagesIndex, message] of messages.entries()) {
        if (message.sentByUser === true) {
            htmlToUpdate += 
            `<div class="row message">
                <div class="col-2"></div>
                <div class="col-10 text-end">
                <div class="buttons">
                <a onclick="editMessage(${messagesIndex})">edit</a> | <a onclick="deleteMessage(${messagesIndex})">delete</a>
                </div>
                    <span class="messageText">${message.text}</span>
                    <div class="timeStamp">${formatDate(message.timeStamp)}</div>
                </div>
            </div>`;
            // ${message.text} .text pulls that key's value from the object saved in sendMessage()
        } else {
            htmlToUpdate += 
            `<div class="row message">
                    <div class="col-10">
                        <span class="userMessageText messageText">${message.text}</span>
                        <div class="timeStamp">${formatDate(message.timeStamp)}</div>
                    </div>
                </div>`
        }
        
    }
    messagesDiv.innerHTML = htmlToUpdate; 
    //scrollAutomatically(false, messagesIndex);
}

// function scrollAutomatically(alignToTop, current) {
//     let element = document.getElementsByClassName("messageText");
//     element.scrollIntoView(alignToTop);
//     //element[current].scrollIntoView(alignToTop);
// }